import { useState, useEffect, useCallback, useRef } from "react"; // Added useRef
import { useLocation } from "wouter";
import { useQuery, useMutation } from "@tanstack/react-query";
import {
  User as UserIcon,
  MapPin,
  Mail,
  Phone,
  Shield,
  FileText,
  Languages,
  LogOut,
  ChevronRight,
  Settings,
  HelpCircle,
  Info,
  Bell,
  Truck,
  Edit,
  Camera,
  Loader2
} from "lucide-react";
import { queryClient } from "@/lib/queryClient";
import { Header } from "@/components/layout/header";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Switch } from "@/components/ui/switch";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Label } from "@/components/ui/label";
import { Separator } from "@/components/ui/separator";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";

import { FileUpload } from "@/components/ui/file-upload";
import { BottomNavigation } from "@/components/layout/bottom-navigation";
import { Chatbot } from "@/components/features/chatbot";
import { useAuth, User } from "@/contexts/auth-context";
import { useLanguageStore } from "@/lib/i18n";
import { useIsMobile } from "@/hooks/use-mobile";
import { useToast } from "@/hooks/use-toast";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { toast as hotToast } from "react-hot-toast"; 

const frappe_token = import.meta.env.VITE_FRAPPE_API_TOKEN;

const getProfileCompletionData = (data: Record<string, any> | null) => {
  // Return default values if data is null or undefined
  if (!data) {
    return {
      completionPercentage: 0,
      missingItems: ["Name", "Phone Number", "Email", "Address", "Experience", "Category", "Driving License Number", 
                     "Driving License Front Image", "Aadhar Number", "Aadhar Front Image"],
      isProfileComplete: false
    };
  }

  const fieldWeights: { field: string; label: string; weight: number }[] = [
    { field: "name1", label: "Name", weight: 10 },
    { field: "phone_number", label: "Phone Number", weight: 10 },
    { field: "email", label: "Email", weight: 10 },
    { field: "address", label: "Address", weight: 10 },
    { field: "experience", label: "Experience", weight: 10 },
    { field: "catagory", label: "Category", weight: 10 },
    { field: "dl_number", label: "Driving License Number", weight: 10 },
    { field: "dl_front_pic", label: "Driving License Front Image", weight: 10 },
    { field: "aadhar_number", label: "Aadhar Number", weight: 10 },
    { field: "aadhar_front_pic", label: "Aadhar Front Image", weight: 10 }
  ];

  let totalPoints = 0;
  let earnedPoints = 0;
  const missingItems: string[] = [];

  fieldWeights.forEach(({ field, label, weight }) => {
    totalPoints += weight;
    const value = data[field];

    const isFilled = typeof value === "string"
      ? value.trim() !== ""
      : typeof value === "object" && value !== null
      ? true
      : typeof value === "number"
      ? true
      : false;

    if (isFilled) {
      earnedPoints += weight;
    } else {
      missingItems.push(label);
    }
  });

  const completionPercentage = Math.round((earnedPoints / totalPoints) * 100);

  return {
    completionPercentage,
    missingItems,
    isProfileComplete: missingItems.length === 0
  };
};


interface UserProfile {
  name1: string;
  email: string;
  phone_number: string;
  emergency_contact_number: string;
  address: string;
  experience: string;
  catagory: string;
  dl_number: string;
  dl_front_pic: string | null;
  dl_back_pic: string | null;
  aadhar_number: string;
  aadhaar_front: string | null;
  aadhaar_back: string | null;
  dob: string;
  profile_pic: string | null;
  driver_id:string | null ;
}




const DriverProfilePage = () =>  {
  const { user, logout, updateUser } = useAuth();
  const { t } = useLanguageStore();
  const [, navigate] = useLocation();
  const isMobile = useIsMobile();
  const { toast } = useToast(); // Use the hook here

  // Add a ref for the Aadhar input field
  const aadharInputRef = useRef<HTMLInputElement>(null);

  // State declarations
  const [isProfileLoading, setIsProfileLoading] = useState(true);
  const [profile, setProfile] = useState<UserProfile>({
    name1: "",
    email: "",
    phone_number: "",
    emergency_contact_number: "",
    address: "",
    experience: "",
    catagory: "",
    dl_number: "",
    dl_front_pic: null,
    dl_back_pic: null,
    aadhar_number: "",
    aadhaar_front: null,
    aadhaar_back: null,
    dob: "",
    profile_pic: null,
    driver_id:null
  });
  const [isEditingProfile, setIsEditingProfile] = useState(false);
  const [editedProfile, setEditedProfile] = useState<Partial<UserProfile>>({});
  const [profile_pic, setprofile_pic] = useState<File | null>(null);
  const [dlFront, setDlFront] = useState<File | null>(null);
  const [dlBack, setDlBack] = useState<File | null>(null);
  const [aadhaar_front, setaadhaar_front] = useState<File | null>(null);
  const [aadhaar_back, setaadhaar_back] = useState<File | null>(null);
  const [isUpdatingProfile, setIsUpdatingProfile] = useState(false);

  // Dialog states
  const [accountSettingsOpen, setAccountSettingsOpen] = useState(false);
  const [helpSupportOpen, setHelpSupportOpen] = useState(false);
  const [notificationSettingsOpen, setNotificationSettingsOpen] = useState(false);
  const [languageSettingsOpen, setLanguageSettingsOpen] = useState(false);


  const [data,setData]= useState<any>(null);

  // Helper function to ensure image URLs are properly formed
  const getFullImageUrl = (url: string | null | undefined): string | undefined => {
    if (!url) return undefined;
    
    // Handle relative paths from backend
    if (url.startsWith('/files')) {
      return `http://localhost:8000${url}`;
    }
    
    return url;
  };

  // Debug effect to monitor editedProfile changes
  useEffect(() => {
    console.log("editedProfile changed:", editedProfile);
    if (editedProfile.aadhar_number !== undefined) {
      console.log("Current aadhar_number in form:", editedProfile.aadhar_number);
    }
  }, [editedProfile]);

  

  // Add uploadFile function
  const uploadFile = async (file: File, type: string): Promise<string> => {
    const formData = new FormData();
    formData.append("file", file, file.name);

    // const SID = localStorage.getItem("SID");
    const myHeaders = new Headers();
    myHeaders.append("Authorization" ,`token ${frappe_token}`);

    const requestOptions = {
      method: "POST",
      headers: myHeaders,
      body: formData,
      redirect: "follow" as RequestRedirect
    };

    const response = await fetch(`http://localhost:8000/api/method/signo_connect.api.upload_image`, requestOptions);
    if (!response.ok) {
      const errorData = await response.text();
      console.error("Upload Error:", errorData);
      throw new Error("Failed to upload file");
    }

    const data = await response.json();
    console.log("File upload response:", data);
    
    // Check different possible locations of file_url in the response
    let fileUrl = data.file_url || data.message?.file_url || (data.status && data.file_url) || "";
    
    // If we have a status: true and file URL that starts with /files, we need to form the complete URL
    if (data.status === true && typeof data.file_url === 'string') {
      if (data.file_url.startsWith('/files')) {
        fileUrl = `http://localhost:8000${data.file_url}`;
        console.log("Constructed complete file URL:", fileUrl);
      } else {
        fileUrl = data.file_url;
      }
    }
    
    if (!fileUrl) {
      console.error("File URL structure in response:", JSON.stringify(data));
      throw new Error("File URL not found in response");
    }
    
    return fileUrl;
  };

  // Profile loading function wrapped in useCallback
  const loadProfile = useCallback(async () => {
    if (!user) {
      console.log("loadProfile called without user, returning.");
      return; // Should ideally be handled by useEffect check
    }

    try {
      const userId = localStorage.getItem("userId") || user.id;
      console.log("Token from env:", import.meta.env.VITE_FRAPPE_API_TOKEN);
      console.log("Token:", frappe_token);
      console.log("ENV:", import.meta.env);

      
      const res = await fetch(`http://localhost:8000/api/method/signo_connect.apis.driver.get_driver_profile?driver_id=${userId}`, {
        method: "GET",
        headers: {
          // "Cookie": `sid= ${SID}`,
          "Authorization": `token ${frappe_token}`
        },
      });
      
      if (!res.ok) {
        throw new Error(`Failed to load profile: ${res.statusText}`);
      }
      
      const json = await res.json();
      console.log("API Response:", json);
      
      // Enhanced debugging for the API response
      if (json.message && json.message.data) {
        console.log("API Response KEYS:", Object.keys(json.message.data));
        console.log("API Response Raw Data:", JSON.stringify(json.message.data, null, 2));
        
        // Add direct debugging for the fields we're interested in
        console.log("DEBUG FIELDS - DIRECT ACCESS:");
        console.log("name1:", json.message.data.name1);
        console.log("emergency_contact_number:", json.message.data.emergency_contact_number);
        console.log("dob:", json.message.data.dob);
        
        console.log("Aadhar Number Present:", "aadhar_number" in json.message.data);
        console.log("All Aadhar related fields:", Object.keys(json.message.data).filter(key => key.includes('aadhar')));
        
        // Check for name, emergency contact and dob fields with different possible names
        console.log("Name1 field:", json.message.data.name1);
        console.log("Name field:", json.message.data.name);
        console.log("Full name field:", json.message.data.full_name);
        console.log("Emergency contact field:", json.message.data.emergency_contact_number);
        console.log("Emergency contact alternatives:", 
          json.message.data.emergency_contact,
          json.message.data.emergency_number
        );
        console.log("DOB field:", json.message.data.dob);
        console.log("DOB alternatives:", 
          json.message.data.date_of_birth,
          json.message.data.birth_date
        );
      }
      
      // Set the profile data
      const profileData = json.message?.data || {}; // Add a fallback empty object
      
      // Process image URLs to ensure they're properly formatted
      if (profileData.profile_pic) {
        profileData.profile_pic = getFullImageUrl(profileData.profile_pic);
      }
      if (profileData.dl_front_pic) {
        profileData.dl_front_pic = getFullImageUrl(profileData.dl_front_pic);
      }
      if (profileData.dl_back_pic) {
        profileData.dl_back_pic = getFullImageUrl(profileData.dl_back_pic);
      }
      if (profileData.aadhar_front_pic) {
        profileData.aadhar_front_pic = getFullImageUrl(profileData.aadhar_front_pic);
      }
      if (profileData.aadhar_back_pic) {
        profileData.aadhar_back_pic = getFullImageUrl(profileData.aadhar_back_pic);
      }
      
      // Check for alternative field names and map them if needed
      if (!profileData.name1 && profileData.name) {
        profileData.name1 = profileData.name;
      } else if (!profileData.name1 && profileData.full_name) {
        profileData.name1 = profileData.full_name;
      }
      
      if (!profileData.emergency_contact_number && profileData.emergency_contact) {
        profileData.emergency_contact_number = profileData.emergency_contact;
      } else if (!profileData.emergency_contact_number && profileData.emergency_number) {
        profileData.emergency_contact_number = profileData.emergency_number;
      }
      
      if (!profileData.dob && profileData.date_of_birth) {
        profileData.dob = profileData.date_of_birth;
      } else if (!profileData.dob && profileData.birth_date) {
        profileData.dob = profileData.birth_date;
      }
      
      // Ensure name property exists for the AvatarFallback component
      if (!profileData.name && profileData.name1) {
        profileData.name = profileData.name1;
      } else if (!profileData.name) {
        profileData.name = ""; // Default to empty string if no name data available
      }
      
      setData(profileData);
      
      // Log specifically to check if required fields are loaded correctly
      console.log("Loaded profile data:", profileData);
      console.log("Name in loaded data:", profileData.name1);
      console.log("Emergency contact in loaded data:", profileData.emergency_contact_number);
      console.log("DOB in loaded data:", profileData.dob);
      console.log("Aadhar number in loaded data:", profileData.aadhar_number);
      
      // Also update the profile state with the latest data
      setProfile({
        name1: profileData.name1 || "",
        email: profileData.email || "",
        phone_number: profileData.phone_number || "",
        emergency_contact_number: profileData.emergency_contact_number || "",
        address: profileData.address || "",
        experience: profileData.experience || "",
        catagory: profileData.catagory || "",
        dl_number: profileData.dl_number || "",
        dl_front_pic: profileData.dl_front_pic || null,
        dl_back_pic: profileData.dl_back_pic || null,
        aadhaar_front: profileData.aadhar_front_pic || null, // Match backend response fields
        aadhaar_back: profileData.aadhar_back_pic || null,
        aadhar_number: profileData.aadhar_number || "",
        dob: profileData.dob || "",
        profile_pic: profileData.profile_pic || null,
        driver_id: userId
      });
      
      console.log("Profile loaded successfully");
    } catch (error) {
      console.error('Error loading profile:', error);
      toast({
        variant: "destructive",
        title: "Error",
        description: "Failed to load profile data"
      });
      
      // Initialize data with empty object to prevent null reference errors
      setData({
        name: "",
        name1: "",
        email: "",
        phone_number: "",
        emergency_contact_number: "",
        address: "",
        experience: "",
        catagory: "",
        dl_number: "",
        dl_front_pic: null,
        dl_back_pic: null,
        aadhar_number: "",
        aadhar_front_pic: null,
        aadhar_back_pic: null,
        dob: "",
        profile_pic: null
      });
    } finally {
      setIsProfileLoading(false); // Update loading state
    }
  }, [user, toast]);

  // Load profile on mount and when user changes
  useEffect(() => {
    if (!user) {
      navigate("/");
      return;
    }

    setIsProfileLoading(true); // Set loading before calling
    loadProfile(); // Call the memoized function
    // Dependencies: user, navigate, and the stable loadProfile function
  }, [user, navigate, loadProfile]);

  // Handle profile update
  const handleProfileUpdate = async (formData: Partial<UserProfile>) => {
    if (!user) return;

    setIsUpdatingProfile(true);
    try {
      console.log("--------------PROFILE------------");
      
      try {


        const fileUploads = [];
        
        // Profile Picture
        if (profile_pic) {
          fileUploads.push(
            uploadFile(profile_pic, 'profile_pic')
              .then(url => ({ field: 'profile_pic', url }))
          );
        }

        // Driving License Files
        if (dlFront) {
          fileUploads.push(
            uploadFile(dlFront, 'dl_front_pic')
              .then(url => ({ field: 'dl_front_pic', url }))
          );
        }
        if (dlBack) {
          fileUploads.push(
            uploadFile(dlBack, 'dl_back_pic')
              .then(url => ({ field: 'dl_back_pic', url }))
          );
        }

        // Aadhar Files
        if (aadhaar_front) {
          fileUploads.push(
            uploadFile(aadhaar_front, 'aadhar_front_pic')
              .then(url => ({ field: 'aadhar_front_pic', url }))
          );
        }
        if (aadhaar_back) {
          fileUploads.push(
            uploadFile(aadhaar_back, 'aadhar_back_pic')
              .then(url => ({ field: 'aadhar_back_pic', url }))
          );
        }


        const uploadedFiles = await Promise.all(fileUploads);
        const uploads = uploadedFiles.reduce((acc, { field, url }) => {
          acc[field] = url;
          return acc;
        }, {} as Record<string, string>);

        // Check directly from the DOM if available
        if (aadharInputRef.current) {
          const aadharInputValue = aadharInputRef.current.value;
          console.log("Aadhar value from input ref:", aadharInputValue);
          // Force set the aadhar_number from the actual DOM input
          editedProfile.aadhar_number = aadharInputValue;
        }

        const userId = localStorage.getItem("userId") || user.id;

        // Get the direct value from the input ref or use the state value
        const aadharValue = aadharInputRef.current?.value || editedProfile.aadhar_number || (data?.aadhar_number || "")
        
        // Create a complete update object with all fields explicitly defined
        const updatePayload = {
          driver_id: userId,
          name1: editedProfile.name1 ?? (data?.name1 || ""),
          email: editedProfile.email ?? (data?.email || ""),
          phone_number: editedProfile.phone_number ?? (data?.phone_number || ""),
          emergency_contact_number: editedProfile.emergency_contact_number ?? (data?.emergency_contact_number || ""),
          address: editedProfile.address ?? (data?.address || ""),
          experience: editedProfile.experience ?? (data?.experience || ""),
          catagory: editedProfile.catagory ?? (data?.catagory || ""),
          dl_number: editedProfile.dl_number ?? (data?.dl_number || ""),
          aadhar_number: editedProfile.aadhar_number || (data?.aadhar_number || ""),
          dob: editedProfile.dob ?? (data?.dob || ""),
          ...uploads // Include uploaded file URLs
        };
        
        // Remove any properties with undefined values
        Object.keys(updatePayload).forEach(key => {
          if (updatePayload[key as keyof typeof updatePayload] === undefined) {
            delete updatePayload[key as keyof typeof updatePayload];
          }
        });
        

        const res1 = await fetch(`http://localhost:8000/api/method/signo_connect.apis.driver.update_profile?driver_id=${userId}`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "Authorization": `token ${frappe_token}`
          },
          body: JSON.stringify(updatePayload),
        });
        
        let responseData;
        try {
          // Parse the response JSON
          responseData = await res1.json();
          console.log("Update Response:", responseData);
          
          // Enhanced debugging for update response
          // if (responseData.message && responseData.message.data) {
          //   console.log("Update Response KEYS:", Object.keys(responseData.message.data));
          //   console.log("Update Response Raw Data:", JSON.stringify(responseData.message.data, null, 2));
          //   console.log("Aadhar Number Present in response:", "aadhar_number" in responseData.message.data);
          //   console.log("All Aadhar related fields in response:", Object.keys(responseData.message.data).filter(key => key.includes('aadhar')));
          // }
          
          // Log specifically to check if aadhar_number is being returned correctly
          // console.log("Aadhar number in request:", editedProfile.aadhar_number || (data?.aadhar_number || ""));
          // console.log("Response data fields:", Object.keys(responseData?.message?.data || {}));
          // if (responseData?.message?.data) {
          //   console.log("Aadhar number in response:", responseData.message.data.aadhar_number);
          // }
        } catch (jsonError) {
          console.error("Error parsing response JSON:", jsonError);
          throw new Error("Failed to parse server response");
        }
        
        // Check if response is OK after parsing
        if (!res1.ok) {
          console.error("Update Error Response:", responseData);
          throw new Error(responseData?.message || "Failed to update profile");
        }
        
        
        
        // Update the auth context user data to reflect changes across the app
        if (user) {
          // Extract relevant data to update in the auth context
          const userUpdate: Partial<User> = {};
          
          if (editedProfile.name1) {
            userUpdate.fullName = editedProfile.name1;
          }
          
          if (editedProfile.email) {
            userUpdate.email = editedProfile.email;
          }
          
          // Update the user context if we have changes
          if (Object.keys(userUpdate).length > 0) {
            updateUser(userUpdate);
          }
        }
        
        // Invalidate any queries that might use profile data
        // queryClient.invalidateQueries({ queryKey: [`/api/method/signo_connect.apis.driver.upload_image`] });
        queryClient.invalidateQueries({ queryKey: [`/api/method/signo_connect.apis.driver.get_driver_profile?driver_id=${user.id}`] });
        
        
        toast({ title: "Success", description: "Profile updated successfully" });
        await loadProfile();
        setIsEditingProfile(false);
  
        // Reset file states
        setprofile_pic(null);
        setDlFront(null);
        setDlBack(null);
        setaadhaar_front(null);
        setaadhaar_back(null);
        
        // Reload profile data and close the dialog
        await loadProfile();
        setIsEditingProfile(false);
      }
      catch (error) {
        const err = error as Error;
        console.error("Error updating profile:", err);
        toast({
          variant: "destructive",
          title: "Error",
          description: err.message || "Failed to update profile"
        });
      }
      finally {
        // Reset states after update attempt
        setIsUpdatingProfile(false);
        // Clear edited profile state but don't do it here to prevent form reset if there's an error
      }
    } catch (error: any) {
      console.error("Error in profile update outer try block:", error);
      toast({
        variant: "destructive",
        title: "Error",
        description: error.message || "Failed to update profile"
      });
      setIsUpdatingProfile(false);
    }
  };

  // Render null if user is not available (useEffect handles redirect)
  if (!user) {
    return null;
  }

  // Show loading state while fetching profile data
  if (isProfileLoading) {
    return (
      <div className="min-h-screen flex flex-col bg-neutral-50">
        <Header>
          <h1 className="text-xl font-bold text-neutral-800 ml-2">
            {t("profile")}
          </h1>
        </Header>

        <div className="flex-1 flex flex-col items-center justify-center p-4">
          <Loader2 className="h-12 w-12 animate-spin text-primary mb-4" />
          <p className="text-lg text-neutral-600">Loading profile...</p>
        </div>

        <BottomNavigation userType="driver" />
      </div>
    );
  }

  // Get profile status only if data is available
  const profileStatus = getProfileCompletionData(data);

  // Debug the data structure
  console.log("Data structure when rendering:", {
    hasData: !!data,
    keys: data ? Object.keys(data) : [],
    aadharValue: data?.aadhar_number,
    // Check various possible field names for Aadhar
    possibleAadharFields: data ? {
      aadhar_number: data.aadhar_number,
      aadharNumber: (data as any).aadharNumber,
      aadhaar_number: (data as any).aadhaar_number,
      aadhar: (data as any).aadhar
    } : {}
  });
  
  // Render null if user is not available or data is still null
  if (!user || !data) {
    if (!user) {
      navigate("/");
    }
    return null;
  }

  // Show loading state while fetching profile data
  if (isProfileLoading) {
    return (
      <div className="min-h-screen flex flex-col bg-neutral-50">
        <Header>
          <h1 className="text-xl font-bold text-neutral-800 ml-2">
            {t("profile")}
          </h1>
        </Header>

        <div className="flex-1 flex flex-col items-center justify-center p-4">
          <Loader2 className="h-12 w-12 animate-spin text-primary mb-4" />
          <p className="text-lg text-neutral-600">Loading profile...</p>
        </div>

        <BottomNavigation userType="driver" />
      </div>
    );
  }

  // Helper function to extract name initials safely
  const getInitials = (name: string | undefined): string => {
    if (!name || typeof name !== 'string') return "";
    return name.slice(0, 2).toUpperCase();
  };

  return (
    <div className="min-h-screen flex flex-col bg-neutral-50 pb-16">
      <Header>
        <h1 className="text-xl font-bold text-neutral-800 ml-2">
          {t("profile")}
        </h1>
      </Header>

      <div className="container mx-auto px-4 py-6 max-w-4xl">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Main Profile Section */}
          <div className="lg:col-span-2 space-y-6">
            <Card>
              <CardContent className="p-0">
                {/* Cover Photo */}
                <div className="h-32 sm:h-48 bg-gradient-to-r from-primary/80 to-primary relative">
                  <Button
                    size="sm"
                    variant="secondary"
                    className="absolute bottom-4 right-4"
                    onClick={() => {
                        if (!data) return;
                        
                        const profileToEdit = {
                          name1: data.name1 || "",
                          email: data.email || "",
                          phone_number: data.phone_number || "",
                          emergency_contact_number: data.emergency_contact_number || "",
                          address: data.address || "",
                          experience: parseInt(data.experience, 10).toString() || "0",
                          catagory: data.catagory || "",
                          dl_number: data.dl_number || "",
                          aadhar_number: data.aadhar_number || "",
                          dob: data.dob || "",
                          profile_pic: data.profile_pic || null
                        };
                        
                        console.log("Opening edit form with data:", profileToEdit);
                        console.log("Aadhar number from data:", data.aadhar_number);
                        
                        setEditedProfile(profileToEdit);
                        setIsEditingProfile(true);
                    }}
                  >
                    <Edit className="h-4 w-4 mr-2" />
                    Edit Profile
                  </Button>
                </div>

                {/* Profile Info */}
                <div className="px-6 pb-6 relative">
                  <div className="absolute -top-12 left-6">
                    <Avatar className="w-24 h-24 border-4 border-white">
                      <AvatarImage src={getFullImageUrl(data.profile_pic)} alt={data?.name || ""} />
                      <AvatarFallback className="text-2xl bg-primary text-white">
                        {getInitials(data?.name || data?.name1)}
                      </AvatarFallback>
                    </Avatar>
                  </div>

                  <div className="pt-16">
                    <h2 className="text-2xl font-bold mb-1">{(data?.name || data?.name1 || "Driver Name").toUpperCase()}</h2>
                    <div className="flex flex-col sm:flex-row sm:items-center text-neutral-600 gap-1 sm:gap-4 mb-4 flex-wrap">
                      <div className="flex items-center">
                        <Truck className="h-4 w-4 mr-2 text-neutral-500" />
                        <span>Driver {data?.experience ? `• ${data?.experience} years exp` : ""}</span>
                      </div>
                      {data?.address && (
                        <div className="flex items-center">
                            <MapPin className="h-4 w-4 mr-2 text-neutral-500" />
                            {/* Consider showing only city/state if address is too long */}
                            <span>{data?.address}</span>
                        </div>
                      )}
                    </div>

                  </div>
                </div>
              </CardContent>
            </Card>

            <Tabs defaultValue="details">
              <TabsList className="w-full grid grid-cols-3 mb-4">
                <TabsTrigger value="details">Details</TabsTrigger>
                <TabsTrigger value="documents">Documents</TabsTrigger>
                <TabsTrigger value="preferences">Preferences</TabsTrigger>
              </TabsList>

              <TabsContent value="details" className="mt-0 space-y-4">
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">Contact Information</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                      <div className="flex items-start">
                        <Phone className="h-5 w-5 mr-3 text-neutral-500 mt-0.5 flex-shrink-0" />
                        <div>
                          <h4 className="font-medium">Phone Number</h4>
                          <p className="text-neutral-600 break-words">{data?.phone_number || "Not added"}</p>
                        </div>
                      </div>

                      <div className="flex items-start">
                        <Mail className="h-5 w-5 mr-3 text-neutral-500 mt-0.5 flex-shrink-0" />
                        <div>
                          <h4 className="font-medium">Email Address</h4>
                          <p className="text-neutral-600 break-words">{data?.email || "Not added"}</p>
                        </div>
                      </div>

                      <div className="flex items-start">
                        <MapPin className="h-5 w-5 mr-3 text-neutral-500 mt-0.5 flex-shrink-0" />
                        <div>
                          <h4 className="font-medium">Address</h4>
                          <p className="text-neutral-600 break-words">{data?.address || "Not added"}</p>
                        </div>
                      </div>

                       <div className="flex items-start">
                        <Phone className="h-5 w-5 mr-3 text-neutral-500 mt-0.5 flex-shrink-0" />
                        <div>
                          <h4 className="font-medium">Emergency Contact</h4>
                          <p className="text-neutral-600 break-words">{data?.emergency_contact_number || "Not added"}</p>
                        </div>
                      </div>

                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">Work Details</CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-4">
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                      <div>
                        <h4 className="font-medium">Experience</h4>
                        <p className="text-neutral-600">{data?.experience ? `${data.experience}` : "Not added"}</p>
                      </div>
                      <div>
                        <h4 className="font-medium">Preferred Vehicle Type</h4>
                        <p className="text-neutral-600 capitalize">{data?.catagory || "Not specified"}</p>
                      </div>
                       <div>
                        <h4 className="font-medium">Date of Birth</h4>
                        <p className="text-neutral-600">{data?.dob || "Not added"}</p>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>

              <TabsContent value="documents" className="mt-0 space-y-4">
                <Card>
                  <CardHeader className="flex flex-row items-center justify-between">
                    <CardTitle className="text-lg">Driving License</CardTitle>
                     {/* Consider adding button to edit documents directly */}
                     <Button variant="ghost" size="sm" onClick={() => setIsEditingProfile(true)}>
                        <Edit className="h-4 w-4"/>
                    </Button>
                  </CardHeader>
                  <CardContent>
                    <div className="mb-4">
                       <h4 className="font-medium text-sm text-neutral-500 mb-1">License Number</h4>
                       <p className="text-neutral-800">{data?.dl_number || "Not added"}</p>
                    </div>

                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                        <div className="border border-dashed border-neutral-300 bg-neutral-50 rounded-md p-4 text-center min-h-[150px] flex flex-col justify-center items-center">
                           {data?.dl_front_pic ? (
                               <img 
                               src={`${getFullImageUrl(data.dl_front_pic)}?ts=${Date.now()}`}
                               alt="DL Front"
                               className="max-h-24 object-contain mb-2"
                             />
                           ) : (
                                <FileText className="h-8 w-8 mx-auto text-neutral-400 mb-2" />
                           )}
                           <p className="text-neutral-600 text-sm">Front Side</p>
                        </div>
                         <div className="border border-dashed border-neutral-300 bg-neutral-50 rounded-md p-4 text-center min-h-[150px] flex flex-col justify-center items-center">
                           {data?.dl_back_pic ? (
                               <img src={`${getFullImageUrl(data.dl_back_pic)}?ts=${Date.now()}`} alt="DL Back" className="max-h-24 object-contain mb-2"/>
                           ) : (
                                <FileText className="h-8 w-8 mx-auto text-neutral-400 mb-2" />
                           )}
                           <p className="text-neutral-600 text-sm">Back Side</p>
                        </div>
                    </div>
                  </CardContent>
                </Card>

                <Card>
                 <CardHeader className="flex flex-row items-center justify-between">
                    <CardTitle className="text-lg">Aadhar Card</CardTitle>
                    {/* Consider adding button to edit documents directly */}
                    <Button variant="ghost" size="sm" onClick={() => setIsEditingProfile(true)}>
                        <Edit className="h-4 w-4"/>
                    </Button>
                  </CardHeader>
                  <CardContent>
                     <div className="mb-4">
                       <h4 className="font-medium text-sm text-neutral-500 mb-1">Aadhar Number</h4>
                       <p className="text-neutral-800">
                         {data?.aadhar_number || "Not added"}
                         {!data?.aadhar_number && (
                           <span className="text-xs text-red-500 block mt-1">
                             (Debug: Check console for available keys)
                           </span>
                         )}
                       </p>
                    </div>
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                         <div className="border border-dashed border-neutral-300 bg-neutral-50 rounded-md p-4 text-center min-h-[150px] flex flex-col justify-center items-center">
                           {data?.aadhar_front_pic ? (
                               <img src={`${getFullImageUrl(data.aadhar_front_pic)}?ts=${Date.now()}`} alt="Aadhar Front" className="max-h-24 object-contain mb-2"/>
                           ) : (
                                <FileText className="h-8 w-8 mx-auto text-neutral-400 mb-2" />
                           )}
                           <p className="text-neutral-600 text-sm">Front Side</p>
                        </div>
                         <div className="border border-dashed border-neutral-300 bg-neutral-50 rounded-md p-4 text-center min-h-[150px] flex flex-col justify-center items-center">
                           {data?.aadhar_back_pic ? (
                               <img src={`${getFullImageUrl(data.aadhar_back_pic)}?ts=${Date.now()}`} alt="Aadhar Back" className="max-h-24 object-contain mb-2"/>
                           ) : (
                                <FileText className="h-8 w-8 mx-auto text-neutral-400 mb-2" />
                           )}
                           <p className="text-neutral-600 text-sm">Back Side</p>
                        </div>
                    </div>
                  </CardContent>
                </Card>
              </TabsContent>
            </Tabs>
          </div>
        </div>
      </div>
    </div>
  );
};

export default DriverProfilePage;